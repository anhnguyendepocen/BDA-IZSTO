-3.816,
-15.602,
-17.661,
-9.72,
1.838,
-11.277,
-15.596,
-1.625)
rats <- data.frame(name = paste0('R',1:75), rats = rats)
rats_sd <- 9.938*1.96
rats <- rats[sort(rats$rats, index.return=T)$ix,]
png('rats.png', width = 800, height=1200)
par(mar = c(5,1,4,2), xpd = T)
plot(0,0,
xlim = c(-50, 50), ylim = c(0, 80),
type='n', axes = F, ylab='', xlab = '')
segments(rats$rats-rats_sd, 1:75, rats$rats+rats_sd, 1:75,
col = par("fg"), lty = par("lty"), xpd = FALSE)
points(rats$rats, 1:75, pch=21, bg='black')
axis(1)
mtext(text= rats$name, line = -8, side=2, at=1:75, las=2, xpd = T, cex = 1)
#axis(2, at = 1:75, labels = rats$name, las = 2, xpd = NA, outer = T)
dev.off()
rats <- c(18.521,
-4.022,
9.018,
-0.59,
-1.607,
3.874,
4.373,
-8.446,
2.384,
-0.393,
4.193,
13.605,
3.638,
-3.44,
11.68,
-1.926,
10.69,
17.473,
4.375,
5.678,
0.216,
5.016,
13.797,
6.079,
-7.321,
-8.043,
-7.169,
-8.495,
.96,
8.261,
-2.309,
3.194,
-7.499,
-4.177,
-10.169,
-12.652,
12.438,
12.377,
11.150,
-0.167,
-5.871,
-7.599,
2.396,
12.992,
1.516,
5.148,
.684,
11.021,
-6.09,
-11.153,
-7.174,
-7.421,
-7.512,
2.954,
3.429,
3.814,
-3.191,
.015,
2.296,
-1.653,
5.407,
-4.771,
-7.273,
-5.062,
.394,
8.914,
-6.868,
-3.816,
-15.602,
-17.661,
-9.72,
1.838,
-11.277,
-15.596,
-1.625)
rats <- data.frame(name = paste0('R',1:75), rats = rats)
rats_sd <- 9.938*1.96
rats <- rats[sort(rats$rats, index.return=T)$ix,]
png('rats.png', width = 800, height=1200)
par(mar = c(5,1,4,2), xpd = T)
plot(0,0,
xlim = c(-50, 50), ylim = c(0, 80),
type='n', axes = F, ylab='', xlab = '')
segments(rats$rats-rats_sd, 1:75, rats$rats+rats_sd, 1:75,
col = par("fg"), lty = par("lty"), xpd = FALSE)
points(rats$rats, 1:75, pch=21, bg='black')
axis(1)
mtext(text= rats$name, line = -6, side=2, at=1:75, las=2, xpd = T, cex = 1)
#axis(2, at = 1:75, labels = rats$name, las = 2, xpd = NA, outer = T)
dev.off()
library(httr)
set_config(use_proxy(url="tmgproxy", port=8080, username="guest",
password="guest"))
library(bmdModeling)
library(httr)
set_config(use_proxy(url="tmgproxy", port=8080, username="guest",
password="guest"))
library(bmdModeling)
x <- scan()
var(x)
pnorm(138, 162, 28)-pnorm(105, 162, 28)
1.5/(1/sqrt(100))
s12=8.6^2
s22=3.9^2
n1=64
n2=68
sp <- sqrt((s12*(n1-1)+s22*(n2-1))/(n1+n2-2))
sp
x1=-5.7
x2=-1.8
(x1-x2)/(sp*sqrt(1/n1+1/n2))
pt(-3.4, df=n1+n2-2)
library(Hmisc)
farmaco=c(rep('A', 17), rep('B',13))
farmaco
compliance=c('si','no', rep('si',5),'no','si','no','si','si','no',rep('si',4),rep('no',8),'si','no','si','no''no')
compliance=c('si','no', rep('si',5),'no','si','no','si','si','no',rep('si',4),rep('no',8),'si','no','si','no','no')
dat=data.frame(farmaco, compliance)
dat
table(dat)
chisq.test(table(dat), correct=F))
chisq.test(table(dat), correct=F)
43*14/(19*44)
purl("main.Rmd")
library(knitr)
purl("main.Rmd")
dir()
setwd("~/Git-Berkeley/BDA")
purl("main.Rmd")
setwd("~/Git-Berkeley/BDA/01BayesianInference")
purl("main.Rmd")
library(rjags)
modelString = " #open quote for modelString
model{
y1 ~ dbin(theta1, N1)
y2 ~ dbin(theta2, N2)
theta1~dbeta(1,1)
theta2~dbeta(1,1)
theta <- theta2-theta1
}
" #close quote for modelString
writeLines(modelString, con = 'TempModel.txt')
dataList = list(N1 =52, N2 =48, y1=43, y2 = 44)
initsList <- function() {
return(list(theta1=0.5, theta2=0.5))
}
resjags = jags.model(file = 'TempModel.txt',
data = dataList,
inits = initsList,
n.chains=1, n.adapt = 100, n.iter=1000)
resjags = jags.model(file = 'TempModel.txt',
data = dataList,
inits = initsList,
n.chains=1, n.adapt = 100)
update(resjags, n.iter = 1000)
jags.samples(resjags, theta, 1000)
jags.samples(resjags, 'theta', 1000)
rm(list=ls())
theta <- jags.samples(resjags, 'theta', 1000)
library(rjags)
modelString = " #open quote for modelString
model{
y1 ~ dbin(theta1, N1)
y2 ~ dbin(theta2, N2)
theta1~dbeta(1,1)
theta2~dbeta(1,1)
theta <- theta2-theta1
}
" #close quote for modelString
# write to a file
writeLines(modelString, con = 'TempModel.txt')
dataList = list(N1 =52, N2 =48, y1=43, y2 = 44)
initsList <- function() {
return(list(theta1=0.5, theta2=0.5))
}
resjags = jags.model(file = 'TempModel.txt',
data = dataList,
inits = initsList,
n.chains=1, n.adapt = 100)
update(resjags, n.iter = 1000)
theta <- jags.samples(resjags, 'theta', 1000)
theta
quantile(theta)
quantile(theta)$mcarray
quantile(theta$mcarray)
theta.post <- coda.samples(resjags, 'theta', 1000)
quantile(theta.post$mcmc)
quantile(theta.post$mcmc[,1])
theta.post$mcmc
theta.post[,'theta']
quantile(theta.post[,'theta'])
quantile(theta.post$mcmc[,'theta'])
resjags = jags.model(file = 'TempModel.txt',
data = dataList,
inits = initsList,
n.chains=1, n.adapt = 100)
update(resjags, n.iter = 1000)
samples <- coda.samples(resjags,
variable.names = 'theta',
n.iter = 1000, thin = 1)
mcmcChain <- as.matrix(samples)
theta_post <- mcmcChain[,"theta"]
quantile(theta_post)
quantile(theta_post, probs=c(.025, .5, .975))
plot(density(theta_post), main= "posterior probability",
xlab=expression(theta[2]-theta[1]) )
quantile(theta_post, probs=c(.025, .5, .975))
library(rstan)
modelString = " #open quote for modelString
data{
int<lower=0> N1;
int<lower=0> N2;
int y;
}
parameters{
real<lower=0, upper=1> theta1;
real<lower=0, upper=1> theta2;
}
model{
theta1~beta(1,1);
theta2~beta(1,1);
y1 ~ binomial(theta1, N1);
y2 ~ binomial(theta2, N2);
}
generated quantities{
real theta;
theta = theta2-theta1
}
" #close quote for modelString
stanDso <- stan_model(modelString)
modelString <- " #open quote for modelString
data{
int<lower=0> N1;
int<lower=0> N2;
int y;
}
parameters{
real<lower=0, upper=1> theta1;
real<lower=0, upper=1> theta2;
}
model{
theta1~beta(1,1);
theta2~beta(1,1);
y1 ~ binomial(theta1, N1);
y2 ~ binomial(theta2, N2);
}
generated quantities{
real theta;
theta = theta2-theta1;
}
" #close quote for modelString
stanDso <- stan_model(modelString)
modelString <- " #open quote for modelString
data{
int<lower=0> N1;
int<lower=0> N2;
int y;
}
parameters{
real<lower=0, upper=1> theta1;
real<lower=0, upper=1> theta2;
}
model{
theta1~beta(1,1);
theta2~beta(1,1);
y1 ~ binomial(theta1, N1);
y2 ~ binomial(theta2, N2);
}
generated quantities{
real theta;
theta <- theta2-theta1;
}
" #close quote for modelString
#
stanDso <- stan_model(modelString)
modelString
modelString <- " //open quote for modelString
data{
int<lower=0> N1;
int<lower=0> N2;
int y;
}
parameters{
real<lower=0, upper=1> theta1;
real<lower=0, upper=1> theta2;
}
model{
theta1~beta(1,1);
theta2~beta(1,1);
y1 ~ binomial(theta1, N1);
y2 ~ binomial(theta2, N2);
}
generated quantities{
real theta;
theta <- theta2-theta1;
}
" #close quote for modelString
stanDso <- stan_model(modelString)
modelString <- "
data{
int<lower=0> N1;
int<lower=0> N2;
int y;
}
parameters{
real<lower=0, upper=1> theta1;
real<lower=0, upper=1> theta2;
}
model{
theta1~beta(1,1);
theta2~beta(1,1);
y1 ~ binomial(theta1, N1);
y2 ~ binomial(theta2, N2);
}
generated quantities{
real theta;
theta <- theta2-theta1;
}
" #close quote for modelString
stanDso <- stan_model(modelString)
modelString <- "
data{
int<lower=0> N1;
int<lower=0> N2;
int y1;
int y2;
}
parameters{
real<lower=0, upper=1> theta1;
real<lower=0, upper=1> theta2;
}
model{
theta1~beta(1,1);
theta2~beta(1,1);
y1 ~ binomial(theta1, N1);
y2 ~ binomial(theta2, N2);
}
generated quantities{
real theta;
theta <- theta2-theta1;
}
" #close quote for modelString
# write to a file
stanDso <- stan_model(modelString)
modelString <- "
data{
int<lower=0> N1;
int<lower=0> N2;
int<lower=0, upper=N1> y1;
int<lower=0, upper=N2> y2;
}
parameters{
real<lower=0, upper=1> theta1;
real<lower=0, upper=1> theta2;
}
model{
theta1~beta(1,1);
theta2~beta(1,1);
y1 ~ binomial(theta1, N1);
y2 ~ binomial(theta2, N2);
}
generated quantities{
real theta;
theta <- theta2-theta1;
}
"
stanDso <- stan_model(modelString)
modelString <- "
data{
int<lower=0> N1;
int<lower=0> N2;
int<lower=0, upper=N1> y1;
int<lower=0, upper=N2> y2;
}
parameters{
real<lower=0, upper=1> theta1;
real<lower=0, upper=1> theta2;
}
model{
theta1~beta(1,1);
theta2~beta(1,1);
y1 ~ binomial(theta1, N1);
y2 ~ binomial(theta2, N2);
}
\\generated quantities{
\\  real theta;
\\  theta <- theta2-theta1;
\\}
"
stanDso <- stan_model(modelString)
modelString <- "
data{
int<lower=0> N1;
int<lower=0> N2;
int<lower=0, upper=N1> y1;
int<lower=0, upper=N2> y2;
}
parameters{
real<lower=0, upper=1> theta1;
real<lower=0, upper=1> theta2;
}
model{
theta1~beta(1,1);
theta2~beta(1,1);
y1 ~ binomial(theta1, N1);
y2 ~ binomial(theta2, N2);
}
//generated quantities{
//  real theta;
//  theta <- theta2-theta1;
//
//}
"
stanDso <- stan_model(modelString)
library(rstan)
modelString <- "
data{
int<lower=0> N1;
int<lower=0> N2;
int<lower=0, upper=N1> y1;
int<lower=0, upper=N2> y2;
}
parameters{
real<lower=0, upper=1> theta1;
real<lower=0, upper=1> theta2;
}
model{
theta1~beta(1,1);
theta2~beta(1,1);
y1 ~ binomial(theta1, N1);
y2 ~ binomial(theta2, N2);
}
"
stanDso <- stan_model(modelString)
modelString <- "
data{
int<lower=0> N1;
int<lower=0> N2;
int<lower=0, upper=N1> y1;
int<lower=0, upper=N2> y2;
}
parameters{
real<lower=0, upper=1> theta1;
real<lower=0, upper=1> theta2;
}
model{
theta1~beta(1,1);
theta2~beta(1,1);
y1 ~ binomial(theta1, N1);
y2 ~ binomial(theta2, N2);
}
"
stanDso <- stan_model(modelString)
modelString <- "
data{
int<lower=0> N1;
int<lower=0> N2;
int<lower=0, upper=N1> y1;
int<lower=0, upper=N2> y2;
}
parameters{
real<lower=0, upper=1> theta1;
real<lower=0, upper=1> theta2;
}
model{
theta1 ~ beta(1,1);
theta2 ~ beta(1,1);
y1 ~ binomial(theta1, N1);
y2 ~ binomial(theta2, N2);
}
"
stanDso <- stan_model(modelString)
getwd()
modelString <- "
data{
int<lower=0> N;
int y[N];
}
parameters{
real<lower=0, upper=1> theta;
}
model{
theta ~ beta(1,1);
y ~ bernoulli(theta);
}
"
stanDso <- stan_model(modelString)
modelString
stanDso <- stan_model(model_code = modelString)
