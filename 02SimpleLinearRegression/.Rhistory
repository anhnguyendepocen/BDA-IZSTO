}
parameters {
vector[2] beta; // Betas are a vector of length 2 (intercept and slope)
real<lower=0> sigma; //error parameter
}
model {
//Priors
beta[1] ~ normal(0, 10); //intercept
beta[2] ~ normal(0, 5); //slope
sigma ~ cauchy(0, 5); //error
log_betaplasma ~ normal(beta[1] + beta[2] * betadiet, sigma);
}'
library(rstan)
stanDso <- stan_model( model_code = model_string )
#fit_stan <- stan(model_code = earn_code, data = earn_dat,
warmup = 100,
stanDso
stanFit <- sampling(object = stanDso,
data = plasma_dat,
chains = 3, iter = 9000, warmup = 1000, thin = 1)
stanFit <- sampling(object = stanDso,
data = plasma_dat,
chains = 3, iter = 9000, warmup = 1000, thin = 1)
samples <- extract(stanFit)
beta_post <- samples[['beta']]
beta_post
qplot(beta_post[,1]) # intercept posterior samples
qplot(beta_post[,2]) # slope posterior samples
qplot(betadiet,log_betaplasma)+
geom_smooth(method=lm,se=F)+
geom_abline(intercept=int,slope=slope,color='red')
int <- median(beta_post[,1]) # posterior intercept estimate
slope <- median(beta_post[,2])# posterior slope estimate
qplot(betadiet,log_betaplasma)+
geom_smooth(method=lm,se=F)+
geom_abline(intercept=int,slope=slope,color='red')
qplot(plasma_g0$betadiet,log(plasma_g0$betaplasma))+
geom_smooth(method=lm,se=F)+
geom_abline(intercept=int,slope=slope,color='red')
traceplot(stanFit)
print(stanFit)
library(stargazer)
stargazer(stanFit)
stargazer(stanFit, type ='html')
stargazer(print(stanFit), type ='html')
plot(print(stanFit))
save(stanDso, file='lm1_stan.RData')
stanFit <- sampling(object = stanDso,
data = plasma_dat,
chains = 3, iter = 9000, warmup = 1000, thin = 1)
traceplot(stanFit)
stan::traceplot(stanFit)
rstan::traceplot(stanFit)
?traceplot
traceplot(stanFit, ncol = 1)
traceplot(stanFit, ncol = 1)
traceplot(stanFit, inc_warmup= T, ncol = 1)
plot(stanFit, pars=c(beta, sigma))
plot(stanFit, pars=c('beta', 'sigma'))
install.packages("glmer2stan")
install.packages('devtools')
install_github('rmcelreath/glmer2stan')
library(devtools)
install_github("rmcelreath/rethinking")
install_github('rmcelreath/glmer2stan')
model_string='
data{
int N1;
int y1[N1, 4];
}
parameters{
real<lower=0,upper=1> SeELISA;
real<lower=0,upper=1> SpELISA;
real<lower=0,upper=1> Seifc;
real<lower=0,upper=1> Spifc;
real<lower=0,upper=1> phi1;
real<lower=0> sigma;
real alpha;
real U1[N1];
}
model{
real pi1[N1];
simplex[4] p1[N1];
//
SeELISA ~ beta(15, 2);
Seifc ~ beta(15, 2);
SpELISA ~ beta(15, 2);
Spifc ~ beta(15, 2);
//
phi1 ~ beta(30,100);
alpha ~ normal(0,5);
sigma ~ cauchy(0, 5);
//
for (j in 1:N1){
U1[j] ~ normal( 0 , sigma);
z1[j] ~ beta(phi1, 1-phi1);
}
for(i in 1:N1){
if (y1[i]==0){
for (i in 1:N1){
pi1[i] = inv_logit((alpha + U1[i]));
p1[i,1] = (1-phi1)*pi1[i]*SeELISA*Seifc + (1-pi1[i]*(1-phi1))*(1-SpELISA)*(1-Spifc);
p1[i,2] = (1-phi1)*pi1[i]*SeELISA*(1-Seifc) + (1-pi1[i]*(1-phi1))*(1-SpELISA)*Spifc;
p1[i,3] = (1-phi1)*pi1[i]*(1-SeELISA)*Seifc + (1-pi1[i]*(1-phi1))*SpELISA*(1-Spifc);
p1[i,4] = (1-phi1)*pi1[i]*(1-SeELISA)*(1-Seifc) + (1-pi1[i]*(1-phi1))*SpELISA*Spifc;
y1[i] ~ multinomial(p1[i]);
}
}
else{
for (i in 1:N1){
pi1[i] = inv_logit((alpha + U1[i]));
p1[i,1] = (phi1)*pi1[i]*SeELISA*Seifc + (1-pi1[i]*(phi1))*(1-SpELISA)*(1-Spifc);
p1[i,2] = (phi1)*pi1[i]*SeELISA*(1-Seifc) + (1-pi1[i]*(phi1))*(1-SpELISA)*Spifc;
p1[i,3] = (phi1)*pi1[i]*(1-SeELISA)*Seifc + (1-pi1[i]*(phi1))*SpELISA*(1-Spifc);
p1[i,4] = (phi1)*pi1[i]*(1-SeELISA)*(1-Seifc) + (1-pi1[i]*(phi1))*SpELISA*Spifc;
y1[i] ~ multinomial(p1[i]);
}
}
}
'
library(rstan)
sta_dso2 <- stan_model(model_code = model_string)
model_string='
data{
int N1;
int y1[N1, 4];
}
parameters{
real<lower=0,upper=1> SeELISA;
real<lower=0,upper=1> SpELISA;
real<lower=0,upper=1> Seifc;
real<lower=0,upper=1> Spifc;
real<lower=0,upper=1> phi1;
real<lower=0> sigma;
real alpha;
real U1[N1];
real<lower=0,upper=1> z1[N1];
}
model{
real pi1[N1];
simplex[4] p1[N1];
//
SeELISA ~ beta(15, 2);
Seifc ~ beta(15, 2);
SpELISA ~ beta(15, 2);
Spifc ~ beta(15, 2);
//
phi1 ~ beta(30,100);
alpha ~ normal(0,5);
sigma ~ cauchy(0, 5);
//
for (j in 1:N1){
U1[j] ~ normal( 0 , sigma);
z1[j] ~ beta(phi1, 1-phi1);
}
if (y1[i]==0)
for(i in 1:N1){
pi1[i] = inv_logit((alpha + U1[i]))*(1-z[i]);
p1[i,1] = pi1[i]*SeELISA*Seifc + (1-pi1[i])*(1-SpELISA)*(1-Spifc);
p1[i,2] = pi1[i]*SeELISA*(1-Seifc) + (1-pi1[i])*(1-SpELISA)*Spifc;
p1[i,3] = pi1[i]*(1-SeELISA)*Seifc + (1-pi1[i])*SpELISA*(1-Spifc);
p1[i,4] = pi1[i]*(1-SeELISA)*(1-Seifc) + (1-pi1[i])*SpELISA*Spifc;
y1[i] ~ multinomial(p1[i]);
}
else
for(i in 1:N1){
pi1[i] = inv_logit((alpha + U1[i]))*(z[i]);
p1[i,1] = pi1[i]*SeELISA*Seifc + (1-pi1[i])*(1-SpELISA)*(1-Spifc);
p1[i,2] = pi1[i]*SeELISA*(1-Seifc) + (1-pi1[i])*(1-SpELISA)*Spifc;
p1[i,3] = pi1[i]*(1-SeELISA)*Seifc + (1-pi1[i])*SpELISA*(1-Spifc);
p1[i,4] = pi1[i]*(1-SeELISA)*(1-Seifc) + (1-pi1[i])*SpELISA*Spifc;
y1[i] ~ multinomial(p1[i]);
}
}
'
library(rstan)
sta_dso2 <- stan_model(model_code = model_string)
model_string='
data{
int N1;
int y1[N1, 4];
}
parameters{
real<lower=0,upper=1> SeELISA;
real<lower=0,upper=1> SpELISA;
real<lower=0,upper=1> Seifc;
real<lower=0,upper=1> Spifc;
real<lower=0,upper=1> phi1;
real<lower=0> sigma;
real alpha;
real U1[N1];
real<lower=0,upper=1> z1[N1];
real pi1[N1];
simplex[4] p1[N1];
}
model{
//
SeELISA ~ beta(15, 2);
Seifc ~ beta(15, 2);
SpELISA ~ beta(15, 2);
Spifc ~ beta(15, 2);
//
phi1 ~ beta(30,100);
alpha ~ normal(0,5);
sigma ~ cauchy(0, 5);
//
for (j in 1:N1){
U1[j] ~ normal( 0 , sigma);
z1[j] ~ beta(phi1, 1-phi1);
}
if (y1[i]==0)
for(i in 1:N1){
pi1[i] = inv_logit((alpha + U1[i]))*(1-z[i]);
p1[i,1] = pi1[i]*SeELISA*Seifc + (1-pi1[i])*(1-SpELISA)*(1-Spifc);
p1[i,2] = pi1[i]*SeELISA*(1-Seifc) + (1-pi1[i])*(1-SpELISA)*Spifc;
p1[i,3] = pi1[i]*(1-SeELISA)*Seifc + (1-pi1[i])*SpELISA*(1-Spifc);
p1[i,4] = pi1[i]*(1-SeELISA)*(1-Seifc) + (1-pi1[i])*SpELISA*Spifc;
y1[i] ~ multinomial(p1[i]);
}
else
for(i in 1:N1){
pi1[i] = inv_logit((alpha + U1[i]))*(z[i]);
p1[i,1] = pi1[i]*SeELISA*Seifc + (1-pi1[i])*(1-SpELISA)*(1-Spifc);
p1[i,2] = pi1[i]*SeELISA*(1-Seifc) + (1-pi1[i])*(1-SpELISA)*Spifc;
p1[i,3] = pi1[i]*(1-SeELISA)*Seifc + (1-pi1[i])*SpELISA*(1-Spifc);
p1[i,4] = pi1[i]*(1-SeELISA)*(1-Seifc) + (1-pi1[i])*SpELISA*Spifc;
y1[i] ~ multinomial(p1[i]);
}
}
'
library(rstan)
sta_dso2 <- stan_model(model_code = model_string)
model_string='
data{
int N1;
int y1[N1, 4];
}
parameters{
real<lower=0,upper=1> SeELISA;
real<lower=0,upper=1> SpELISA;
real<lower=0,upper=1> Seifc;
real<lower=0,upper=1> Spifc;
real<lower=0,upper=1> phi1;
real<lower=0> sigma;
real alpha;
real U1[N1];
real<lower=0,upper=1> z1[N1];
real pi1[N1];
simplex[4] p1[N1];
}
model{
//
SeELISA ~ beta(15, 2);
Seifc ~ beta(15, 2);
SpELISA ~ beta(15, 2);
Spifc ~ beta(15, 2);
//
phi1 ~ beta(30,100);
alpha ~ normal(0,5);
sigma ~ cauchy(0, 5);
//
for (j in 1:N1){
U1[j] ~ normal( 0 , sigma);
z1[j] ~ beta(phi1, 1-phi1);
}
for(i in 1:N1){
if (y1[i]==0){
pi1[i] = inv_logit((alpha + U1[i]))*(1-z[i]);
p1[i,1] = pi1[i]*SeELISA*Seifc + (1-pi1[i])*(1-SpELISA)*(1-Spifc);
p1[i,2] = pi1[i]*SeELISA*(1-Seifc) + (1-pi1[i])*(1-SpELISA)*Spifc;
p1[i,3] = pi1[i]*(1-SeELISA)*Seifc + (1-pi1[i])*SpELISA*(1-Spifc);
p1[i,4] = pi1[i]*(1-SeELISA)*(1-Seifc) + (1-pi1[i])*SpELISA*Spifc;
y1[i] ~ multinomial(p1[i]);
}
else{
pi1[i] = inv_logit((alpha + U1[i]))*(z[i]);
p1[i,1] = pi1[i]*SeELISA*Seifc + (1-pi1[i])*(1-SpELISA)*(1-Spifc);
p1[i,2] = pi1[i]*SeELISA*(1-Seifc) + (1-pi1[i])*(1-SpELISA)*Spifc;
p1[i,3] = pi1[i]*(1-SeELISA)*Seifc + (1-pi1[i])*SpELISA*(1-Spifc);
p1[i,4] = pi1[i]*(1-SeELISA)*(1-Seifc) + (1-pi1[i])*SpELISA*Spifc;
y1[i] ~ multinomial(p1[i]);
}
}
}
'
library(rstan)
sta_dso2 <- stan_model(model_code = model_string)
model_string='
data{
int N1;
int y1[N1, 4];
}
parameters{
real<lower=0,upper=1> SeELISA;
real<lower=0,upper=1> SpELISA;
real<lower=0,upper=1> Seifc;
real<lower=0,upper=1> Spifc;
real<lower=0,upper=1> phi1;
real<lower=0> sigma;
real alpha;
real U1[N1];
real<lower=0,upper=1> z1[N1];
real pi1[N1];
simplex[4] p1[N1];
}
transformed parameters{
real pi1[N1];
simplex[4] p1[N1];
for (i in 1:N1){
pi1[i] = inv_logit((alpha + U1[i]))*z1[i];
p1[i,1] = pi1[i]*SeELISA*Seifc + (1-pi1[i])*(1-SpELISA)*(1-Spifc);
p1[i,2] = pi1[i]*SeELISA*(1-Seifc) + (1-pi1[i])*(1-SpELISA)*Spifc;
p1[i,3] = pi1[i]*(1-SeELISA)*Seifc + (1-pi1[i])*SpELISA*(1-Spifc);
p1[i,4] = pi1[i]*(1-SeELISA)*(1-Seifc) + (1-pi1[i])*SpELISA*Spifc;
}
model{
//
SeELISA ~ beta(15, 2);
Seifc ~ beta(15, 2);
SpELISA ~ beta(15, 2);
Spifc ~ beta(15, 2);
//
phi1 ~ beta(30,100);
alpha ~ normal(0,5);
sigma ~ cauchy(0, 5);
//
for (j in 1:N1){
U1[j] ~ normal( 0 , sigma);
//z1[j] ~ beta(phi1, 1-phi1);
}
for(i in 1:N1){
if (y1[i]==0){
z1[i] = phi1
y1[i] ~ multinomial(p1[i]);
}
else{
z1[i] = 1-phi1
y1[i] ~ multinomial(p1[i]);
}
}
}
'
library(rstan)
sta_dso2 <- stan_model(model_code = model_string)
model_string='
data{
int N1;
int y1[N1, 4];
}
parameters{
real<lower=0,upper=1> SeELISA;
real<lower=0,upper=1> SpELISA;
real<lower=0,upper=1> Seifc;
real<lower=0,upper=1> Spifc;
real<lower=0,upper=1> phi1;
real<lower=0> sigma;
real alpha;
real U1[N1];
real<lower=0,upper=1> z1[N1];
real pi1[N1];
simplex[4] p1[N1];
}
transformed parameters{
real pi1[N1];
simplex[4] p1[N1];
for (i in 1:N1){
pi1[i] = inv_logit((alpha + U1[i]))*z1[i];
p1[i,1] = pi1[i]*SeELISA*Seifc + (1-pi1[i])*(1-SpELISA)*(1-Spifc);
p1[i,2] = pi1[i]*SeELISA*(1-Seifc) + (1-pi1[i])*(1-SpELISA)*Spifc;
p1[i,3] = pi1[i]*(1-SeELISA)*Seifc + (1-pi1[i])*SpELISA*(1-Spifc);
p1[i,4] = pi1[i]*(1-SeELISA)*(1-Seifc) + (1-pi1[i])*SpELISA*Spifc;
}
model{
//
SeELISA ~ beta(15, 2);
Seifc ~ beta(15, 2);
SpELISA ~ beta(15, 2);
Spifc ~ beta(15, 2);
//
phi1 ~ beta(30,100);
alpha ~ normal(0,5);
sigma ~ cauchy(0, 5);
//
for (j in 1:N1){
U1[j] ~ normal( 0 , sigma);
//z1[j] ~ beta(phi1, 1-phi1);
}
for(i in 1:N1){
if (y1[i]==0){
z1[i] = phi1;
y1[i] ~ multinomial(p1[i]);
}
else{
z1[i] = 1-phi1;
y1[i] ~ multinomial(p1[i]);
}
}
}
'
library(rstan)
sta_dso2 <- stan_model(model_code = model_string)
model_string='
data{
int N1;
int y1[N1, 4];
}
parameters{
real<lower=0,upper=1> SeELISA;
real<lower=0,upper=1> SpELISA;
real<lower=0,upper=1> Seifc;
real<lower=0,upper=1> Spifc;
real<lower=0,upper=1> phi1;
real<lower=0> sigma;
real alpha;
real U1[N1];
real<lower=0,upper=1> z1[N1];
}
transformed parameters{
real pi1[N1];
simplex[4] p1[N1];
for (i in 1:N1){
pi1[i] = inv_logit((alpha + U1[i]))*z1[i];
p1[i,1] = pi1[i]*SeELISA*Seifc + (1-pi1[i])*(1-SpELISA)*(1-Spifc);
p1[i,2] = pi1[i]*SeELISA*(1-Seifc) + (1-pi1[i])*(1-SpELISA)*Spifc;
p1[i,3] = pi1[i]*(1-SeELISA)*Seifc + (1-pi1[i])*SpELISA*(1-Spifc);
p1[i,4] = pi1[i]*(1-SeELISA)*(1-Seifc) + (1-pi1[i])*SpELISA*Spifc;
}
model{
//
SeELISA ~ beta(15, 2);
Seifc ~ beta(15, 2);
SpELISA ~ beta(15, 2);
Spifc ~ beta(15, 2);
//
phi1 ~ beta(30,100);
alpha ~ normal(0,5);
sigma ~ cauchy(0, 5);
//
for (j in 1:N1){
U1[j] ~ normal( 0 , sigma);
//z1[j] ~ beta(phi1, 1-phi1);
}
for(i in 1:N1){
if (y1[i]==0){
z1[i] = phi1;
y1[i] ~ multinomial(p1[i]);
}
else{
z1[i] = 1-phi1;
y1[i] ~ multinomial(p1[i]);
}
}
}
'
library(rstan)
sta_dso2 <- stan_model(model_code = model_string)
model_string='
data{
int N1;
int y1[N1, 4];
}
parameters{
real<lower=0,upper=1> SeELISA;
real<lower=0,upper=1> SpELISA;
real<lower=0,upper=1> Seifc;
real<lower=0,upper=1> Spifc;
real<lower=0,upper=1> phi1;
real<lower=0> sigma;
real alpha;
real U1[N1];
real<lower=0,upper=1> z1[N1];
}
transformed parameters{
real pi1[N1];
simplex[4] p1[N1];
for (i in 1:N1){
pi1[i] = inv_logit((alpha + U1[i]))*z1[i];
p1[i,1] = pi1[i]*SeELISA*Seifc + (1-pi1[i])*(1-SpELISA)*(1-Spifc);
p1[i,2] = pi1[i]*SeELISA*(1-Seifc) + (1-pi1[i])*(1-SpELISA)*Spifc;
p1[i,3] = pi1[i]*(1-SeELISA)*Seifc + (1-pi1[i])*SpELISA*(1-Spifc);
p1[i,4] = pi1[i]*(1-SeELISA)*(1-Seifc) + (1-pi1[i])*SpELISA*Spifc;
}
}
model{
//
SeELISA ~ beta(15, 2);
Seifc ~ beta(15, 2);
SpELISA ~ beta(15, 2);
Spifc ~ beta(15, 2);
//
phi1 ~ beta(30,100);
alpha ~ normal(0,5);
sigma ~ cauchy(0, 5);
//
for (j in 1:N1){
U1[j] ~ normal( 0 , sigma);
//z1[j] ~ beta(phi1, 1-phi1);
}
for(i in 1:N1){
if (y1[i]==0){
z1[i] = phi1;
y1[i] ~ multinomial(p1[i]);
}
else{
z1[i] = 1-phi1;
y1[i] ~ multinomial(p1[i]);
}
}
}
'
library(rstan)
sta_dso2 <- stan_model(model_code = model_string)
