real dev;
real glm_rep[N];
vector[N] y_rep; // A new vector!
dev <- 0;
for ( i in 1:N ) {
glm_rep[i] <- Intercept
+ beta_prosoc_left * prosoc_left[i]
+ beta_condition * condition[i];
y_rep[i] <- bernoulli_rng(inv_logit(glm_rep[i])); // replication!
dev <- dev + (-2) * binomial_log( pulled_left[i] , bin_total[i] , inv_logit(glm[i]) );
}
}
'
mymod<- myglmer2stan( pulled_left ~ prosoc_left + condition,
data=chimpanzees, family = 'binomial',
Ranef = FALSE,
calcWAIC=T,
warmup=500,
iter = 1000,
chains=2,
mymodel = my_model)
my_model <- '
data{
int N;
int pulled_left[N];
real prosoc_left[N];
real condition[N];
int bin_total[N];
}
parameters{
real Intercept;
real beta_prosoc_left;
real beta_condition;
}
model{
real glm[N];
// Priors
Intercept ~ normal( 0 , 100 );
beta_prosoc_left ~ normal( 0 , 100 );
beta_condition ~ normal( 0 , 100 );
// Fixed effects
for ( i in 1:N ) {
glm[i] <- Intercept
+ beta_prosoc_left * prosoc_left[i]
+ beta_condition * condition[i];
glm[i] <- inv_logit( glm[i] );
}
pulled_left ~ binomial( bin_total , glm );
}
generated quantities{
real dev;
real glm_rep[N];
vector[N] y_rep; // A new vector!
dev <- 0;
for ( i in 1:N ) {
glm_rep[i] <- Intercept
+ beta_prosoc_left * prosoc_left[i]
+ beta_condition * condition[i];
y_rep[i] <- bernoulli_rng(inv_logit(glm_rep[i])); // replication!
dev <- dev + (-2) * binomial_log( pulled_left[i] , bin_total[i] , inv_logit(glm_rep[i]) );
}
}
'
mymod<- myglmer2stan( pulled_left ~ prosoc_left + condition,
data=chimpanzees, family = 'binomial',
Ranef = FALSE,
calcWAIC=T,
warmup=500,
iter = 1000,
chains=2,
mymodel = my_model)
samples <- extract(mymod)
my_model <- '
data{
int N;
int pulled_left[N];
real prosoc_left[N];
real condition[N];
int bin_total[N];
}
parameters{
real Intercept;
real beta_prosoc_left;
real beta_condition;
}
model{
real glm[N];
// Priors
Intercept ~ normal( 0 , 100 );
beta_prosoc_left ~ normal( 0 , 100 );
beta_condition ~ normal( 0 , 100 );
// Fixed effects
for ( i in 1:N ) {
glm[i] <- Intercept
+ beta_prosoc_left * prosoc_left[i]
+ beta_condition * condition[i];
glm[i] <- inv_logit( glm[i] );
}
pulled_left ~ binomial( bin_total , glm );
}
generated quantities{
real dev;
real glm_rep[N];
vector[N] y_rep; // A new vector!
dev <- 0;
for ( i in 1:N ) {
glm_rep[i] <- Intercept
+ beta_prosoc_left * prosoc_left[i]
+ beta_condition * condition[i];
y_rep[i] <- bernoulli_rng(inv_logit(Intercept
+ beta_prosoc_left * prosoc_left[i]
+ beta_condition * condition[i])); // replication!
dev <- dev + (-2) * binomial_log( pulled_left[i] , bin_total[i] , inv_logit(glm_rep[i]) );
}
}
'
mymod<- myglmer2stan( pulled_left ~ prosoc_left + condition,
data=chimpanzees, family = 'binomial',
Ranef = FALSE,
calcWAIC=T,
warmup=500,
iter = 1000,
chains=2,
mymodel = my_model)
samples <- extract(mymod)
my_model <- '
data{
int N;
int pulled_left[N];
real prosoc_left[N];
real condition[N];
int bin_total[N];
}
parameters{
real Intercept;
real beta_prosoc_left;
real beta_condition;
}
model{
real glm[N];
// Priors
Intercept ~ normal( 0 , 100 );
beta_prosoc_left ~ normal( 0 , 100 );
beta_condition ~ normal( 0 , 100 );
// Fixed effects
for ( i in 1:N ) {
glm[i] <- Intercept
+ beta_prosoc_left * prosoc_left[i]
+ beta_condition * condition[i];
glm[i] <- inv_logit( glm[i] );
}
pulled_left ~ binomial( bin_total , glm );
}
generated quantities{
real dev;
real glm_rep[N];
int y_rep[N]; // A new vector!
dev <- 0;
for ( i in 1:N ) {
glm_rep[i] <- Intercept
+ beta_prosoc_left * prosoc_left[i]
+ beta_condition * condition[i];
y_rep[i] <- bernoulli_rng(inv_logit(Intercept
+ beta_prosoc_left * prosoc_left[i]
+ beta_condition * condition[i])); // replication!
dev <- dev + (-2) * binomial_log( pulled_left[i] , bin_total[i] , inv_logit(glm_rep[i]) );
}
}
'
mymod<- myglmer2stan( pulled_left ~ prosoc_left + condition,
data=chimpanzees, family = 'binomial',
Ranef = FALSE,
calcWAIC=T,
warmup=500,
iter = 1000,
chains=2,
mymodel = my_model)
samples <- extract(mymod)
samples$y_rep
launch_shinystan(mymod)
# Number of observations
N <- 100
# Model matrix (with column of 1s for intercept and one covariate)
X <- cbind(Const = 1, X1 = rnorm(N))
K <- ncol(X)
# Generate fake outcome y
beta <- c(2, 1/2) # pick intercept and coefficient
sigma <- 1 # standard deviation
y <- rnorm(N, mean = X %*% beta, sd = sigma) # generate data
model='
data {
int           N ; # integer, number of observations
int           K ; # integer, number of columns in model matrix
matrix[N,K]   X ; # N by K model matrix
vector[N]     y ; # vector of N observations
}
parameters {
real<lower=0> sigma ; # real number > 0, standard deviation
vector[K]     beta ;  # K-vector of regression coefficients
}
model {
beta ~ normal(0, 5) ;       # prior for betas
sigma ~ cauchy(0, 2.5) ;    # prior for sigma
y ~ normal(X*beta, sigma) ; # vectorized likelihood
}
generated quantities {
# Here we do the simulations from the posterior predictive distribution
vector[N] y_rep ; # vector of same length as the data y
for (n in 1:N)
y_rep[n] <- normal_rng(X[n]*beta, sigma) ;
}
'
stan_data <- list(y = y, X = X, N = N, K = K)
# Fit the model
stanfit <- stan(file = "stan_code.stan", data = stan_data)
# Launch ShinyStan
launch_shinystan(stanfit)
stan(model)
stanfit <- stan(model_code = model, data = stan_data)
launch_shinystan(stanfit)
r_rep
y_rep
sample(stanfit)$y_rep
sample(stanfit)@y_rep
extract(stanfit, 'y_rep')
extract(mymod, 'y_rep')
launch_shinystan(stanfit)
samples <- extract(mymod, pars='y_rep')
lauch_shinystam(mymod)
launch_shinystam(mymod)
launch_shinystan(mymod)
datalist <- (pulled_left <- chimpanzees$pulled_left,
datalist <- (pulled_left = chimpanzees$pulled_left,
datalist <- list(pulled_left = chimpanzees$pulled_left,
prosoc_left = chimpanzees$prosoc_left,
condition = chimpanzees$condition)
datalist
mymod<- stan( model_code = my_model,
data = datalist)
datalist <- list(pulled_left = chimpanzees$pulled_left,
prosoc_left = chimpanzees$prosoc_left,
condition = chimpanzees$condition)
datalist
datalist <- list(pulled_left = chimpanzees$pulled_left,
prosoc_left = chimpanzees$prosoc_left,
condition = chimpanzees$condition,
N = nrow(chimpanzees))
mymod<- stan( model_code = my_model,
data = datalist)
samples <- extract(mymod, pars='y_rep')
datalist <- list(pulled_left = chimpanzees$pulled_left,
prosoc_left = chimpanzees$prosoc_left,
condition = chimpanzees$condition,
N = nrow(chimpanzees))
datalist
mymod<- stan( model_code = my_model,
data = datalist)
my_model <- '
data{
int N;
int pulled_left[N];
real prosoc_left[N];
real condition[N];
}
parameters{
real Intercept;
real beta_prosoc_left;
real beta_condition;
}
model{
real glm[N];
// Priors
Intercept ~ normal( 0 , 100 );
beta_prosoc_left ~ normal( 0 , 100 );
beta_condition ~ normal( 0 , 100 );
// Fixed effects
for ( i in 1:N ) {
glm[i] <- Intercept
+ beta_prosoc_left * prosoc_left[i]
+ beta_condition * condition[i];
glm[i] <- inv_logit( glm[i] );
}
pulled_left ~ binomial(1 , glm );
}
generated quantities{
real dev;
real glm_rep[N];
int y_rep[N]; // A new vector!
dev <- 0;
for ( i in 1:N ) {
glm_rep[i] <- Intercept
+ beta_prosoc_left * prosoc_left[i]
+ beta_condition * condition[i];
y_rep[i] <- bernoulli_rng(inv_logit(Intercept
+ beta_prosoc_left * prosoc_left[i]
+ beta_condition * condition[i])); // replication!
dev <- dev + (-2) * binomial_log( pulled_left[i] , bin_total[i] , inv_logit(glm_rep[i]) );
}
}
'
mymod<- stan( model_code = my_model,
data = datalist)
my_model <- '
data{
int N;
int pulled_left[N];
real prosoc_left[N];
real condition[N];
}
parameters{
real Intercept;
real beta_prosoc_left;
real beta_condition;
}
model{
real glm[N];
// Priors
Intercept ~ normal( 0 , 100 );
beta_prosoc_left ~ normal( 0 , 100 );
beta_condition ~ normal( 0 , 100 );
// Fixed effects
for ( i in 1:N ) {
glm[i] <- Intercept
+ beta_prosoc_left * prosoc_left[i]
+ beta_condition * condition[i];
glm[i] <- inv_logit( glm[i] );
}
pulled_left ~ binomial(1 , glm );
}
generated quantities{
real dev;
real glm_rep[N];
int y_rep[N]; // A new vector!
dev <- 0;
for ( i in 1:N ) {
glm_rep[i] <- Intercept
+ beta_prosoc_left * prosoc_left[i]
+ beta_condition * condition[i];
y_rep[i] <- bernoulli_rng(inv_logit(Intercept
+ beta_prosoc_left * prosoc_left[i]
+ beta_condition * condition[i])); // replication!
dev <- dev + (-2) * binomial_log( pulled_left[i] , 1 , inv_logit(glm_rep[i]) );
}
}
'
mymod<- stan( model_code = my_model,
data = datalist)
samples <- extract(mymod, pars='y_rep')
launch_shinystan(mymod)
y <- chimpanzees$pulled_left
launch_shinystan(mymod)
table(sample$y_rep[1,],y)
sample$y_rep[1,]
table(samples$y_rep[1,],y)
launch_shinystan(mymod)
launch_shinystan(mymod)
pp <- apply(sample$y_rep, 1, mean)
pp <- apply(as.matrix(sample$y_rep), 1, mean)
pp <- apply(samples$y_rep, 1, mean)
pp
mean(y)
pp[pp>mean(y)]/length(pp)
length(pp[pp>mean(y)])/length(pp)
plot(1:4000,pp)
qqplot(pp)+geom_histogram()
qqplot()+geom_histogram(pp)
qqplot()+geom_histogram(y=pp)
datac <- chimpanzees
rm(chimpanzees)
save(datac, file='R\\datac.RData')
names(datac)
names(datac) <- c('hospital','id','condition','block','trial','treatment','switch','outcome')
rm(list=ls())
load('R\\datac.RData')
library(glmer2stan)
source('R\\myglmer2stan.R')
y <- chimpanzees$pulled_left
load('R\\datac.RData')
library(glmer2stan)
source('R\\myglmer2stan.R')
y <- datac$outcome
mod_2<- myglmer2stan(outcome ~ treatment + condition,
data = datac, family = 'binomial',
Ranef = FALSE,
calcWAIC=T,
warmup=500,
iter = 1000,
chains=2)
datac
names(datac) <- c('hospital','id','condition','block','trial','treatment','switch','outcome')
save(datac, file='R\\datac.RData')
rm(list=ls())
load('R\\datac.RData')
library(glmer2stan)
source('R\\myglmer2stan.R')
y <- datac$outcome
mod_2<- myglmer2stan(outcome ~ treatment + condition,
data = datac, family = 'binomial',
Ranef = FALSE,
calcWAIC=T,
warmup=500,
iter = 1000,
chains=2)
mod_2<- myglmer2stan(outcome ~ treatment + condition,
data = datac, family = 'binomial',
Ranef = FALSE,
sample = FALSE,
calcWAIC=T,
warmup=500,
iter = 1000,
chains=2)
show(mod_2)
my_model <- '
data{
int N;
int outcome[N];
real treatment[N];
real condition[N];
}
parameters{
real Intercept;
real beta_treatment;
real beta_condition;
}
model{
real glm[N];
// Priors
Intercept ~ normal( 0 , 100 );
beta_treatment ~ normal( 0 , 100 );
beta_condition ~ normal( 0 , 100 );
// Fixed effects
for ( i in 1:N ) {
glm[i] <- Intercept
+ beta_treatment * treatment[i]
+ beta_condition * condition[i];
glm[i] <- inv_logit( glm[i] );
}
pulled_left ~ binomial(1 , glm );
}
generated quantities{
real dev;
real glm_rep[N];
int y_rep[N]; // A new vector!
dev <- 0;
for ( i in 1:N ) {
glm_rep[i] <- Intercept
+ beta_treatment * treatment[i]
+ beta_condition * condition[i];
y_rep[i] <- bernoulli_rng(inv_logit(Intercept
+ beta_treatment * treatment[i]
+ beta_condition * condition[i])); // replication!
dev <- dev + (-2) * binomial_log( outcome[i] , 1 , inv_logit(glm_rep[i]) );
}
}
'
datalist <- list(outcome = datac$outcome,
treatment = datac$treatment,
condition = datac$condition,
N = nrow(datac))
mymod<- stan( model_code = my_model,
data = datalist)
my_model <- '
data{
int N;
int outcome[N];
real treatment[N];
real condition[N];
}
parameters{
real Intercept;
real beta_treatment;
real beta_condition;
}
model{
real glm[N];
// Priors
Intercept ~ normal( 0 , 100 );
beta_treatment ~ normal( 0 , 100 );
beta_condition ~ normal( 0 , 100 );
// Fixed effects
for ( i in 1:N ) {
glm[i] <- Intercept
+ beta_treatment * treatment[i]
+ beta_condition * condition[i];
glm[i] <- inv_logit( glm[i] );
}
outcome ~ binomial(1 , glm );
}
generated quantities{
real dev;
real glm_rep[N];
int y_rep[N]; // A new vector!
dev <- 0;
for ( i in 1:N ) {
glm_rep[i] <- Intercept
+ beta_treatment * treatment[i]
+ beta_condition * condition[i];
y_rep[i] <- bernoulli_rng(inv_logit(Intercept
+ beta_treatment * treatment[i]
+ beta_condition * condition[i])); // replication!
dev <- dev + (-2) * binomial_log( outcome[i] , 1 , inv_logit(glm_rep[i]) );
}
}
'
datalist <- list(outcome = datac$outcome,
treatment = datac$treatment,
condition = datac$condition,
N = nrow(datac))
mymod<- stan( model_code = my_model,
data = datalist)
samples <- extract(mymod, pars='y_rep')
save(samples, mymod, file='output\\workspace.RData')
