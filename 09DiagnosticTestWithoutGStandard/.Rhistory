model_string='
data{
int N1;
int y1[N1, 4];
}
parameters{
real<lower=0,upper=1> SeELISA;
real<lower=0,upper=1> SpELISA;
real<lower=0,upper=1> Seifc;
real<lower=0,upper=1> Spifc;
real<lower=0,upper=1> phi1;
real<lower=0> sigma;
real alpha;
real U1[N1];
int z1[N1];
}
transformed parameters{
int pi1[N1];
simplex[4] p1[N1];
//real<lower=0,upper=1> pistar[N1];
//real pistar1[N1];
for (i in 1:N1){
//z1[i] ~ bernoulli(phi1);
pi1[i] = inv_logit((alpha + U1[i])*z1[i]);
//pi1[i] = z1[i] * pistar1[i];
p1[i,1] = pi1[i]*SeELISA*Seifc + (1-pi1[i])*(1-SpELISA)*(1-Spifc);
p1[i,2] = pi1[i]*SeELISA*(1-Seifc) + (1-pi1[i])*(1-SpELISA)*Spifc;
p1[i,3] = pi1[i]*(1-SeELISA)*Seifc + (1-pi1[i])*SpELISA*(1-Spifc);
p1[i,4] = pi1[i]*(1-SeELISA)*(1-Seifc) + (1-pi1[i])*SpELISA*Spifc;
}
}
model{
//
SeELISA ~ beta(15, 2);
Seifc ~ beta(15, 2);
SpELISA ~ beta(15, 2);
Spifc ~ beta(15, 2);
//
phi1 ~ beta(15,2);
alpha ~ normal(0,10);
sigma ~ cauchy(0, 5);
//
for (j in 1:N1){
U1[j] ~ normal( 0 , sigma);
z1[j] ~ bernoulli(phi1);
}
for(i in 1:N1){
y1[i] ~ multinomial(p1[i]);
}
}
'
library(rstan)
sta_dso2 <- stan_model(model_code = model_string)
model_string='
data{
int N1;
int y1[N1, 4];
}
parameters{
real<lower=0,upper=1> SeELISA;
real<lower=0,upper=1> SpELISA;
real<lower=0,upper=1> Seifc;
real<lower=0,upper=1> Spifc;
real<lower=0,upper=1> phi1;
real<lower=0> sigma;
real alpha;
real U1[N1];
simplex z1[N1];
}
transformed parameters{
int pi1[N1];
simplex[4] p1[N1];
//real<lower=0,upper=1> pistar[N1];
//real pistar1[N1];
for (i in 1:N1){
//z1[i] ~ bernoulli(phi1);
pi1[i] = inv_logit((alpha + U1[i])*z1[i]);
//pi1[i] = z1[i] * pistar1[i];
p1[i,1] = pi1[i]*SeELISA*Seifc + (1-pi1[i])*(1-SpELISA)*(1-Spifc);
p1[i,2] = pi1[i]*SeELISA*(1-Seifc) + (1-pi1[i])*(1-SpELISA)*Spifc;
p1[i,3] = pi1[i]*(1-SeELISA)*Seifc + (1-pi1[i])*SpELISA*(1-Spifc);
p1[i,4] = pi1[i]*(1-SeELISA)*(1-Seifc) + (1-pi1[i])*SpELISA*Spifc;
}
}
model{
//
SeELISA ~ beta(15, 2);
Seifc ~ beta(15, 2);
SpELISA ~ beta(15, 2);
Spifc ~ beta(15, 2);
//
phi1 ~ beta(15,2);
alpha ~ normal(0,10);
sigma ~ cauchy(0, 5);
//
for (j in 1:N1){
U1[j] ~ normal( 0 , sigma);
z1[j] ~ bernoulli(phi1);
}
for(i in 1:N1){
y1[i] ~ multinomial(p1[i]);
}
}
'
library(rstan)
sta_dso2 <- stan_model(model_code = model_string)
model_string='
data{
int N1;
int y1[N1, 4];
}
parameters{
real<lower=0,upper=1> SeELISA;
real<lower=0,upper=1> SpELISA;
real<lower=0,upper=1> Seifc;
real<lower=0,upper=1> Spifc;
real<lower=0,upper=1> phi1;
real<lower=0> sigma;
real alpha;
real U1[N1];
vector z1[N1];
}
transformed parameters{
int pi1[N1];
simplex[4] p1[N1];
//real<lower=0,upper=1> pistar[N1];
//real pistar1[N1];
for (i in 1:N1){
//z1[i] ~ bernoulli(phi1);
pi1[i] = inv_logit((alpha + U1[i])*z1[i]);
//pi1[i] = z1[i] * pistar1[i];
p1[i,1] = pi1[i]*SeELISA*Seifc + (1-pi1[i])*(1-SpELISA)*(1-Spifc);
p1[i,2] = pi1[i]*SeELISA*(1-Seifc) + (1-pi1[i])*(1-SpELISA)*Spifc;
p1[i,3] = pi1[i]*(1-SeELISA)*Seifc + (1-pi1[i])*SpELISA*(1-Spifc);
p1[i,4] = pi1[i]*(1-SeELISA)*(1-Seifc) + (1-pi1[i])*SpELISA*Spifc;
}
}
model{
//
SeELISA ~ beta(15, 2);
Seifc ~ beta(15, 2);
SpELISA ~ beta(15, 2);
Spifc ~ beta(15, 2);
//
phi1 ~ beta(15,2);
alpha ~ normal(0,10);
sigma ~ cauchy(0, 5);
//
for (j in 1:N1){
U1[j] ~ normal( 0 , sigma);
z1[j] ~ bernoulli(phi1);
}
for(i in 1:N1){
y1[i] ~ multinomial(p1[i]);
}
}
'
library(rstan)
sta_dso2 <- stan_model(model_code = model_string)
plot(seq(0,1,length.out=100), dbeta(seq(0,1,length.out=100),2,2))
plot(seq(0,1,length.out=100), dbeta(seq(0,1,length.out=100),1,1))
plot(seq(0,1,length.out=100), dbeta(seq(0,1,length.out=100),1,2))
model_string='
data{
int N1;
int y1[N1, 4];
}
parameters{
real<lower=0,upper=1> SeELISA;
real<lower=0,upper=1> SpELISA;
real<lower=0,upper=1> Seifc;
real<lower=0,upper=1> Spifc;
real<lower=0,upper=1> phi1;
real<lower=0> sigma;
real alpha;
real U1[N1];
real z1[N1];
}
transformed parameters{
int pi1[N1];
simplex[4] p1[N1];
//real<lower=0,upper=1> pistar[N1];
//real pistar1[N1];
for (i in 1:N1){
//z1[i] ~ bernoulli(phi1);
pi1[i] = inv_logit((alpha + U1[i])*z1[i]);
//pi1[i] = z1[i] * pistar1[i];
p1[i,1] = pi1[i]*SeELISA*Seifc + (1-pi1[i])*(1-SpELISA)*(1-Spifc);
p1[i,2] = pi1[i]*SeELISA*(1-Seifc) + (1-pi1[i])*(1-SpELISA)*Spifc;
p1[i,3] = pi1[i]*(1-SeELISA)*Seifc + (1-pi1[i])*SpELISA*(1-Spifc);
p1[i,4] = pi1[i]*(1-SeELISA)*(1-Seifc) + (1-pi1[i])*SpELISA*Spifc;
}
}
model{
//
SeELISA ~ beta(15, 2);
Seifc ~ beta(15, 2);
SpELISA ~ beta(15, 2);
Spifc ~ beta(15, 2);
//
phi1 ~ beta(15,2);
alpha ~ normal(0,10);
sigma ~ cauchy(0, 5);
//
for (j in 1:N1){
U1[j] ~ normal( 0 , sigma);
z1[j] ~ beta(0.5, 0.5);
}
for(i in 1:N1){
y1[i] ~ multinomial(p1[i]);
}
}
'
library(rstan)
sta_dso2 <- stan_model(model_code = model_string)
model_string='
data{
int N1;
int y1[N1, 4];
}
parameters{
real<lower=0,upper=1> SeELISA;
real<lower=0,upper=1> SpELISA;
real<lower=0,upper=1> Seifc;
real<lower=0,upper=1> Spifc;
real<lower=0,upper=1> phi1;
real<lower=0> sigma;
real alpha;
real U1[N1];
real z1[N1];
}
transformed parameters{
real pi1[N1];
simplex[4] p1[N1];
//real<lower=0,upper=1> pistar[N1];
//real pistar1[N1];
for (i in 1:N1){
//z1[i] ~ bernoulli(phi1);
pi1[i] = inv_logit((alpha + U1[i])*z1[i]);
//pi1[i] = z1[i] * pistar1[i];
p1[i,1] = pi1[i]*SeELISA*Seifc + (1-pi1[i])*(1-SpELISA)*(1-Spifc);
p1[i,2] = pi1[i]*SeELISA*(1-Seifc) + (1-pi1[i])*(1-SpELISA)*Spifc;
p1[i,3] = pi1[i]*(1-SeELISA)*Seifc + (1-pi1[i])*SpELISA*(1-Spifc);
p1[i,4] = pi1[i]*(1-SeELISA)*(1-Seifc) + (1-pi1[i])*SpELISA*Spifc;
}
}
model{
//
SeELISA ~ beta(15, 2);
Seifc ~ beta(15, 2);
SpELISA ~ beta(15, 2);
Spifc ~ beta(15, 2);
//
phi1 ~ beta(15,2);
alpha ~ normal(0,10);
sigma ~ cauchy(0, 5);
//
for (j in 1:N1){
U1[j] ~ normal( 0 , sigma);
z1[j] ~ beta(0.5, 0.5);
}
for(i in 1:N1){
y1[i] ~ multinomial(p1[i]);
}
}
'
library(rstan)
sta_dso2 <- stan_model(model_code = model_string)
yy <- read.DIF('clipboard', transpose = T, header = T)
yy
y1 = as.matrix(yy, byrow=T; ncol=4)
y1 = as.matrix(yy, by.row=T; ncol=4)
y1 = matrix(yy, by.row=T; ncol=4)
matrix(yy, byrow=T, ncol=4)
yy
as.matrix(yy)
dataList <- list(y1 = as.matrix(yy), N1 = 18)
stanFit <- sampling(object = sta_dso2,
data = data_list,
chains = 1, iter = 9000,
warmup = 1000, thin = 1)
stanFit <- sampling(object = sta_dso2,
data = dataList,
chains = 1, iter = 9000,
warmup = 1000, thin = 1)
model_string='
data{
int N1;
int y1[N1, 4];
}
parameters{
real<lower=0,upper=1> SeELISA;
real<lower=0,upper=1> SpELISA;
real<lower=0,upper=1> Seifc;
real<lower=0,upper=1> Spifc;
real<lower=0,upper=1> phi1;
real<lower=0> sigma;
real alpha;
real U1[N1];
real z1[N1];
}
transformed parameters{
real pi1[N1];
simplex[4] p1[N1];
for (i in 1:N1){
pi1[i] = inv_logit((alpha + U1[i])*z1[i]);
p1[i,1] = pi1[i]*SeELISA*Seifc + (1-pi1[i])*(1-SpELISA)*(1-Spifc);
p1[i,2] = pi1[i]*SeELISA*(1-Seifc) + (1-pi1[i])*(1-SpELISA)*Spifc;
p1[i,3] = pi1[i]*(1-SeELISA)*Seifc + (1-pi1[i])*SpELISA*(1-Spifc);
p1[i,4] = pi1[i]*(1-SeELISA)*(1-Seifc) + (1-pi1[i])*SpELISA*Spifc;
}
}
model{
//
SeELISA ~ beta(1, 1);
Seifc ~ beta(1, 1);
SpELISA ~ beta(1, 1);
Spifc ~ beta(15, 2);
//
phi1 ~ beta(1,1);
alpha ~ normal(0,5);
sigma ~ cauchy(0, 5);
//
for (j in 1:N1){
U1[j] ~ normal( 0 , sigma);
z1[j] ~ beta(0.5, 0.5);
}
for(i in 1:N1){
y1[i] ~ multinomial(p1[i]);
}
}
'
library(rstan)
sta_dso2 <- stan_model(model_code = model_string)
sta_dso2
stanFit <- sampling(object = sta_dso2,
data = dataList,
chains = 1, iter = 9000,
warmup = 1000, thin = 1)
?stanfit
model_string='
data{
int N1;
int y1[N1, 4];
}
parameters{
real<lower=0,upper=1> SeELISA;
real<lower=0,upper=1> SpELISA;
real<lower=0,upper=1> Seifc;
real<lower=0,upper=1> Spifc;
real<lower=0,upper=1> phi1;
real<lower=0> sigma;
real alpha;
real U1[N1];
real<lower=0,upper=1> z1[N1];
}
transformed parameters{
real pi1[N1];
simplex[4] p1[N1];
for (i in 1:N1){
pi1[i] = inv_logit((alpha + U1[i])*z1[i]);
p1[i,1] = pi1[i]*SeELISA*Seifc + (1-pi1[i])*(1-SpELISA)*(1-Spifc);
p1[i,2] = pi1[i]*SeELISA*(1-Seifc) + (1-pi1[i])*(1-SpELISA)*Spifc;
p1[i,3] = pi1[i]*(1-SeELISA)*Seifc + (1-pi1[i])*SpELISA*(1-Spifc);
p1[i,4] = pi1[i]*(1-SeELISA)*(1-Seifc) + (1-pi1[i])*SpELISA*Spifc;
}
}
model{
//
SeELISA ~ beta(1, 1);
Seifc ~ beta(1, 1);
SpELISA ~ beta(1, 1);
Spifc ~ beta(15, 2);
//
phi1 ~ beta(10,10);
alpha ~ normal(0,5);
sigma ~ cauchy(0, 5);
//
for (j in 1:N1){
U1[j] ~ normal( 0 , sigma);
z1[j] ~ beta(0.5, 0.5);
}
for(i in 1:N1){
y1[i] ~ multinomial(p1[i]);
}
}
'
library(rstan)
sta_dso2 <- stan_model(model_code = model_string)
#yy <- read.DIF('clipboard', transpose = T, header = T)
#dataList <- list(y1 = as.matrix(yy), N1 = 18)
stanFit <- sampling(object = sta_dso2,
data = dataList,
chains = 1, iter = 9000,
warmup = 1000, thin = 1)
stanmer(stanFit)
library(glmer2stan)
stanmer(stanFit)
summary(stanFit)
print(stanFit)
356/2
178/18
356/18
yy <- read.DIF('clipboard', transpose = T, header = T)
dataList <- list(y1 = as.matrix(yy), N1 = 18)
stanFit <- sampling(object = sta_dso2,
data = dataList,
chains = 1, iter = 9000,
warmup = 1000, thin = 1)
y1
dataList
yy <- read.DIF('clipboard', transpose = T, header = T)
yy
yy <- read.DIF('clipboard', transpose = T, header = T)
dataList <- list(y1 = as.matrix(yy), N1 = 18)
stanFit <- sampling(object = sta_dso2,
data = dataList,
chains = 1, iter = 9000,
warmup = 1000, thin = 1)
print(stanFit)
yy <- read.DIF('clipboard', transpose = T, header = T)
dataList <- list(y1 = as.matrix(yy), N1 = 18)
stanFit <- sampling(object = sta_dso2,
data = dataList,
chains = 1, iter = 9000,
warmup = 1000, thin = 1)
print(stanFit)
model_string='
data{
int N1;
int y1[N1, 4];
}
parameters{
real<lower=0,upper=1> SeELISA;
real<lower=0,upper=1> SpELISA;
real<lower=0,upper=1> Seifc;
real<lower=0,upper=1> Spifc;
real<lower=0,upper=1> phi1;
real<lower=0> sigma;
real alpha;
real U1[N1];
real<lower=0,upper=1> z1[N1];
}
transformed parameters{
real pi1[N1];
simplex[4] p1[N1];
for (i in 1:N1){
pi1[i] = inv_logit((alpha + U1[i])*z1[i]);
p1[i,1] = pi1[i]*SeELISA*Seifc + (1-pi1[i])*(1-SpELISA)*(1-Spifc);
p1[i,2] = pi1[i]*SeELISA*(1-Seifc) + (1-pi1[i])*(1-SpELISA)*Spifc;
p1[i,3] = pi1[i]*(1-SeELISA)*Seifc + (1-pi1[i])*SpELISA*(1-Spifc);
p1[i,4] = pi1[i]*(1-SeELISA)*(1-Seifc) + (1-pi1[i])*SpELISA*Spifc;
}
}
model{
//
SeELISA ~ beta(15, 2);
Seifc ~ beta(15, 2);
SpELISA ~ beta(15, 2);
Spifc ~ beta(15, 2);
//
phi1 ~ beta(30,100);
alpha ~ normal(0,5);
sigma ~ cauchy(0, 5);
//
for (j in 1:N1){
U1[j] ~ normal( 0 , sigma);
z1[j] ~ beta(0.5, 0.5);
}
for(i in 1:N1){
y1[i] ~ multinomial(p1[i]);
}
}
'
library(rstan)
sta_dso2 <- stan_model(model_code = model_string)
#yy <- read.DIF('clipboard', transpose = T, header = T)
#dataList <- list(y1 = as.matrix(yy), N1 = 18)
stanFit <- sampling(object = sta_dso2,
data = dataList,
chains = 1, iter = 9000,
warmup = 1000, thin = 1)
print(stanFit)
save('output\blca.RData')
save(stanFit, 'output\\blca.RData')
getwd()
save(stanFit, file='output\\blca.RData')
head(stanFit)
head(print(stanFit)
)
head(print(stanFit, pars = c('SeELISA','SpELISA'))
)
head(print(stanFit, pars = c('SeELISA','SpELISA', 'SeIFC','SpIFC', 'phi1'))
)
print(stanFit, pars = c('SeELISA','SpELISA', 'Seifc','Spifc', 'phi1')
)
yy
kable(yy)
library(knitr)
kable(yy)
dat=yy
save(dat, file = 'output\\datNZ.RData')
load('output\\blca.RData')
load('output\\blca.RData')
dat
getwd()
load('output\\blca.RData')
load('output\\datNZ.RData')
load('output\\blca.RData')
load('output/datNZ.RData)
load('output\\datNZ.RData)
9*24
